// -- Model dump before env processor pipeline:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor unused checks:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor type parameter check:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor check recursive struct definition:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor check cyclic type instantiation:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor unused struct params check:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor access and use check before inlining:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor inlining:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor access and use check after inlining:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor acquires check:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor simplifier:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_create_only::add_func(x, y);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store =  move|y: u64| function_values_early_bind_only::add_func(x, y);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor lambda-lifting:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store = earlybind(function_values_create_only::add_func, x);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store = earlybind(function_values_early_bind_only::add_func, x);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor specification checker:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store = earlybind(function_values_create_only::add_func, x);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store = earlybind(function_values_early_bind_only::add_func, x);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


// -- Model dump after env processor specification rewriter:
module 0x815::function_types_only {
    public fun fn_id(f: |u64|u64 with copy): |u64|u64 with copy {
        f
    }
} // end 0x815::function_types_only
module 0x815::function_values_apply_only {
    public fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
} // end 0x815::function_values_apply_only
module 0x815::function_values_create_only {
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    public fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store = earlybind(function_values_create_only::add_func, x);
          f
        }
    }
} // end 0x815::function_values_create_only
module 0x815::function_values_early_bind_only {
    private fun map(f: |u64|u64 with copy,x: u64): u64 {
        (f)(x)
    }
    public fun add_func(x: u64,y: u64): u64 {
        Add<u64>(x, y)
    }
    private fun build_function(x: u64): |u64|u64 with copy+store {
        {
          let f: |u64|u64 with copy+store = earlybind(function_values_early_bind_only::add_func, x);
          f
        }
    }
    public fun main(x: u64): u64 {
        {
          let g: |u64|u64 with copy+store = function_values_early_bind_only::build_function(x);
          function_values_early_bind_only::map(g, 3)
        }
    }
} // end 0x815::function_values_early_bind_only


============ initial bytecode ================

[variant baseline]
public fun function_types_only::fn_id($t0: |u64|u64 with copy): |u64|u64 with copy {
     var $t1: |u64|u64 with copy
  0: $t1 := infer($t0)
  1: return $t1
}


[variant baseline]
public fun function_values_apply_only::map($t0: |u64|u64 with copy, $t1: u64): u64 {
     var $t2: u64
  0: $t2 := invoke($t0, $t1)
  1: return $t2
}


[variant baseline]
public fun function_values_create_only::add_func($t0: u64, $t1: u64): u64 {
     var $t2: u64
  0: $t2 := +($t0, $t1)
  1: return $t2
}


[variant baseline]
public fun function_values_create_only::build_function($t0: u64): |u64|u64 with copy+store {
     var $t1: |u64|u64 with copy+store
     var $t2: |u64|u64 with copy+store
     var $t3: |(u64, u64)|u64 with copy+store
  0: $t3 := function_values_create_only::add_func
  1: $t2 := earlybind($t3, $t0)
  2: $t1 := infer($t2)
  3: return $t1
}


[variant baseline]
fun function_values_early_bind_only::map($t0: |u64|u64 with copy, $t1: u64): u64 {
     var $t2: u64
  0: $t2 := invoke($t0, $t1)
  1: return $t2
}


[variant baseline]
public fun function_values_early_bind_only::add_func($t0: u64, $t1: u64): u64 {
     var $t2: u64
  0: $t2 := +($t0, $t1)
  1: return $t2
}


[variant baseline]
fun function_values_early_bind_only::build_function($t0: u64): |u64|u64 with copy+store {
     var $t1: |u64|u64 with copy+store
     var $t2: |u64|u64 with copy+store
     var $t3: |(u64, u64)|u64 with copy+store
  0: $t3 := function_values_early_bind_only::add_func
  1: $t2 := earlybind($t3, $t0)
  2: $t1 := infer($t2)
  3: return $t1
}


[variant baseline]
public fun function_values_early_bind_only::main($t0: u64): u64 {
     var $t1: u64
     var $t2: |u64|u64 with copy+store
     var $t3: u64
  0: $t2 := function_values_early_bind_only::build_function($t0)
  1: $t3 := 3
  2: $t1 := function_values_early_bind_only::map($t2, $t3)
  3: return $t1
}

============ after LiveVarAnalysisProcessor: ================

[variant baseline]
public fun function_types_only::fn_id($t0: |u64|u64 with copy): |u64|u64 with copy {
     var $t1: |u64|u64 with copy [unused]
     # live vars: $t0
  0: return $t0
}


[variant baseline]
public fun function_values_apply_only::map($t0: |u64|u64 with copy, $t1: u64): u64 {
     var $t2: u64 [unused]
     # live vars: $t0, $t1
  0: $t1 := invoke($t0, $t1)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun function_values_create_only::add_func($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := +($t0, $t1)
     # live vars: $t0
  1: return $t0
}


[variant baseline]
public fun function_values_create_only::build_function($t0: u64): |u64|u64 with copy+store {
     var $t1: |u64|u64 with copy+store [unused]
     var $t2: |u64|u64 with copy+store
     var $t3: |(u64, u64)|u64 with copy+store
     # live vars: $t0
  0: $t3 := function_values_create_only::add_func
     # live vars: $t0, $t3
  1: $t2 := earlybind($t3, $t0)
     # live vars: $t2
  2: return $t2
}


[variant baseline]
fun function_values_early_bind_only::map($t0: |u64|u64 with copy, $t1: u64): u64 {
     var $t2: u64 [unused]
     # live vars: $t0, $t1
  0: $t1 := invoke($t0, $t1)
     # live vars: $t1
  1: return $t1
}


[variant baseline]
public fun function_values_early_bind_only::add_func($t0: u64, $t1: u64): u64 {
     var $t2: u64 [unused]
     # live vars: $t0, $t1
  0: $t0 := +($t0, $t1)
     # live vars: $t0
  1: return $t0
}


[variant baseline]
fun function_values_early_bind_only::build_function($t0: u64): |u64|u64 with copy+store {
     var $t1: |u64|u64 with copy+store [unused]
     var $t2: |u64|u64 with copy+store
     var $t3: |(u64, u64)|u64 with copy+store
     # live vars: $t0
  0: $t3 := function_values_early_bind_only::add_func
     # live vars: $t0, $t3
  1: $t2 := earlybind($t3, $t0)
     # live vars: $t2
  2: return $t2
}


[variant baseline]
public fun function_values_early_bind_only::main($t0: u64): u64 {
     var $t1: u64 [unused]
     var $t2: |u64|u64 with copy+store
     var $t3: u64 [unused]
     # live vars: $t0
  0: $t2 := function_values_early_bind_only::build_function($t0)
     # live vars: $t2
  1: $t0 := 3
     # live vars: $t0, $t2
  2: $t0 := function_values_early_bind_only::map($t2, $t0)
     # live vars: $t0
  3: return $t0
}


============ disassembled file-format ==================
// Move bytecode v7
module 815.function_types_only {


public fn_id(Arg0: |u64|u64 with copy): |u64|u64 with copy /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: |u64|u64 with copy)
	1: Ret
}
}// Move bytecode v7
module 815.function_values_apply_only {


public map(Arg0: |u64|u64 with copy, Arg1: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](Arg1: u64)
	1: MoveLoc[0](Arg0: |u64|u64 with copy)
	2: InvokeFunction(2)
	3: Ret
}
}// Move bytecode v7
module 815.function_values_create_only {


public add_func(Arg0: u64, Arg1: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: MoveLoc[1](Arg1: u64)
	2: Add
	3: Ret
}
public build_function(Arg0: u64): |u64|u64 with copy+store /* def_idx: 1 */ {
L1:	loc0: |u64,u64|u64 with copy+store
B0:
	0: LdFunction add_func(u64, u64): u64
	1: StLoc[1](loc0: |u64,u64|u64 with copy+store)
	2: MoveLoc[0](Arg0: u64)
	3: MoveLoc[1](loc0: |u64,u64|u64 with copy+store)
	4: EarlyBindFunction(4, 1)
	5: Ret
}
}// Move bytecode v7
module 815.function_values_early_bind_only {


map(Arg0: |u64|u64 with copy, Arg1: u64): u64 /* def_idx: 0 */ {
B0:
	0: MoveLoc[1](Arg1: u64)
	1: MoveLoc[0](Arg0: |u64|u64 with copy)
	2: InvokeFunction(2)
	3: Ret
}
public add_func(Arg0: u64, Arg1: u64): u64 /* def_idx: 1 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: MoveLoc[1](Arg1: u64)
	2: Add
	3: Ret
}
build_function(Arg0: u64): |u64|u64 with copy+store /* def_idx: 2 */ {
L1:	loc0: |u64,u64|u64 with copy+store
B0:
	0: LdFunction add_func(u64, u64): u64
	1: StLoc[1](loc0: |u64,u64|u64 with copy+store)
	2: MoveLoc[0](Arg0: u64)
	3: MoveLoc[1](loc0: |u64,u64|u64 with copy+store)
	4: EarlyBindFunction(6, 1)
	5: Ret
}
public main(Arg0: u64): u64 /* def_idx: 3 */ {
B0:
	0: MoveLoc[0](Arg0: u64)
	1: Call build_function(u64): |u64|u64 with copy+store
	2: LdU64(3)
	3: Call map(|u64|u64 with copy, u64): u64
	4: Ret
}
}
============ bytecode verification succeeded ========
